// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/hobord/golang-poc-rest/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// FooRepository is an autogenerated mock type for the FooRepository type
type FooRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FooRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *FooRepository) GetAll(ctx context.Context) ([]*entity.Foo, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Foo
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Foo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Foo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *FooRepository) GetByID(ctx context.Context, id string) (*entity.Foo, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Foo
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Foo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Foo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *FooRepository) Save(ctx context.Context, _a1 *entity.Foo) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Foo) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
